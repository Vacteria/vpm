#!/bin/bash

include_rename()
{
	#
	# Usage : include_rename <octal_perm> <dest_directory> <file_extension> <file(s)>
	#
	# Example :
	#
	# include_rename 0644 /etc/bashrc.d bashrc file_one.bashrc file_two.bashrc
	#

	local PERMISSION DIRECTORY EXTENSION INPUT ONLYNAME I

	if [ "${#@}" -lt "4" ]
	then
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
		return 0
	fi

	PERMISSION="${1}"
	DIRECTORY="${2}"
	EXTENSION=".${3//.}"

	shift 3

	INPUT="${@}"

	for I in ${INPUT}
	do
		ONLYNAME="${I##*/}"
		if [ -r "${I}" ]
		then
			doinstall --silent --mode=${PERMISSION} ${I} ${DIRECTORY}/${ONLYNAME//${EXTENSION}}
		else
			printme -f "log" -l "${FUNCNAME}" msg_mis_file "${B}"
		fi
	done

	return 0
}

newpam()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_PAMDIR} .pam ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newlimits()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_LIMITSDIR} .limits ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newramdisk()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		STRIPED="${1%%.*}"
		if [ -r ${1} ]
		then
			doinstall --silent --mode="0755" ${1} ${VPM_RAMDISKHOOKS}/${STRIPED##*/}.sh
		else
			printme -f "log" -l "${FUNCNAME}" msg_mis_file "${1}"
		fi
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newrun()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0755 ${VPM_RCDIR} .run ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newcompletion()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_COMPLETIONDIR} .completion ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newrotate()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_ROTATEDIR} .rotate ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newxinetd()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_XINETDIR} .xinetd ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newrcconf()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_RCCONFDIR} .rcconf ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newbashrc()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_BASHRCDIR} .bashrc ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newprofile()
{
	local SHORT MYNAME ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		SHORT="${1##*/}"
		MYNAME="${SHORT//.profile}"
		MYNAME="${MYNAME//.sh}"
		
		doinstall --silent --mode="0755" "${1}" ${VPM_PROFILEDIR}/${MYNAME}.sh
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newlogout()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_BASHLOGOUTDIR} .logout ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newlogin()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_BASHLOGINDIR} .login ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newrsyslogd()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		include_rename 0644 ${VPM_RSYSLOGDIR} .rsyslogd ${@}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newrules()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		doinstall --silent --mode="0644" "${1}" ${VPM_RULESDIR}/${1##*/}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newdesktop()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		doinstall --silent --mode="0644" "${1}" ${VPM_MENUDIR}/${1##*/}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newicon()
{
	local BASEFILE FILENAME SIZE SECTION ICON DEST ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		FILENAME="${1}"
		BASEFILE="${FILENAME##*/}"
		set -- ${BASEFILE//_/ }
		case ${#@} in
			1 )
				SIZE=""
				SECTION=""
				ICON="${1}"
			;;
			3 )
				SIZE="${1}"
				SECTION="${2}"
				ICON="${3}"
			;;
		esac

		case ${SIZE} in
			8x8 | 16x16 | 24x24 | 32x32 | 48x48 | 64x64 | 128x128 | scalable )
				DEST="${VPM_HICOLORDIR}/${SIZE}/${SECTION}"
			;;
			* )
				DEST="${VPM_PIXMAPDIR}"
			;;
		esac

		if [[ -n "${DEST}" && -r "${FILENAME}" ]]
		then
			doinstall --silent --mode="0644" "${FILENAME}" ${DEST}/${ICON}
		fi
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}

newxinitrc()
{
	local ARGV ARGC

	ARGV=(${@})
	ARGC="${#ARGV[@]}"

	if (( ${ARGC} > 0 ))
	then
		doinstall --silent --mode="0644" "${1}" ${VPM_XINITRC}/${1##*/}
	else
		printme -f "warn" msg_mis_args -l "${FUNCNAME}"
	fi

	return 0
}
