#!/bin/bash

exit_and_rm()
{
	error "${@}"
	
	if [ -d "${VPM_EXPLODE_DIR}" ]
	then
		rm -rf ${VPM_EXPLODE_DIR}
	fi
	
	exit 1
}

add_initscripts()
{
	local INIT_SCRIPTS I
	rchroot insserv -h &>/dev/null || return 0
	INIT_SCRIPTS="$(view_content "${VPM_PKG_NO_EXT}" | \
	sed -e '/^\/etc\/rc.d\//!d' -e 's,.*/,,' -e 's/.keep//g')"

	if [ -n "${INIT_SCRIPTS}" ]
	then
		msg "$(gettext 'Installing initscripts')"
		for I in ${INIT_SCRIPTS}
		do
			insserv -f ${I}
		done
	fi

	return 0
}

move_files()
{
	install -m 0644 ${VPM_CONTROL} ${VPM_END_PKGFILE}
	
	if [ -f "${VPM_TMP_SETUP}" ]
	then
		install -m 0744 "${VPM_TMP_SETUP}" "${VPM_END_SETUP}"
	fi

	if [ -f "${VPM_CHANGELOG}" ]
	then
		install -m 0644 "${VPM_CHANGELOG}" "${VPM_END_CHLOG}"
	fi

	return 0
}

install_packages()
{
	local P M H

	if [ "${AND_BULK}" == "1" ]
	then
		local PKG FAIL_BULK FAIL_CONFIG

		include "bulk"

		bulk_test_list ${1}
		case $? in
			1 ) printme -f "die" msg_need_list ;;
			2 ) printme -f "die" msg_mis_file    ${1} ;;
			3 ) printme -f "die" msg_empty_file  ${1} ;;
		esac

		if ! bulk_test_dirs ${PROC_DIRS}
		then
			die "$(gettext 'The next directories is missing :\n%s')" "${MIS_DIRS}"
		fi

		if ! bulk_find_packages ${PROC_DIRS}
		then
			die "$(gettext 'The next directories have not vpm packages :\n%s')" ${NO_PKGS}
		else
			[ "${AND_ROOT}" != "/" ] && PARAM="--root=${AND_ROOT}"
			[ "${AND_VERBOSE}" == "1" ] && PARAM+=" --verbose"
			
			for PKG in ${PROC_PKGS}
			do
				vpm ${PARAM} --install --notriggers --noscript --norundeps --noconflicts --noinitrc ${PKG} \
				|| FAIL_BULK+=" ${PKG}"
			done

			[ -n "${FILE_BULK}" ] && die "$(gettex 'Failed to install next packages :\n%s')" "${FAIL_BULK}"
			
			if [ ${AND_CONFIG} == "1" ]
			then
				for PKG in ${PROC_PKGS}
				do
					vpm ${PARAM} --config ${PKG##*/} || FAIL_CONFIG+=" ${PKG}"
				done
			fi
		fi

		[ -n "${FILE_BULK}" ] && die "$(gettex 'Failed to config next packages :\n%s')" "${FAIL_CONFIG}"

		exit 0
	fi

	for P in ${@}
	do		
		need_be_vpm ${P}
		read_pkg_dates ${P}

		VPM_EXPLODE_DIR="${VPM_TMP_DIR}/${VPM_PKG_NO_EXT}"
		VPM_CONTROL="${VPM_EXPLODE_DIR}/package"
		VPM_CHANGELOG="${VPM_EXPLODE_DIR}/changelog"
		VPM_TMP_SETUP="${VPM_EXPLODE_DIR}/setup"
		VPM_END_SETUP="${VPM_SETUP_DIR}/${VPM_PKG_NO_EXT}"
		VPM_END_PKGFILE="${VPM_PKG_FILES}/${VPM_PKG_NO_EXT}"
		VPM_END_CHLOG="${VPM_CHLOG_FILES}/${VPM_PKG_NO_EXT}"
		VPM_LOCAL_END_SETUP="${VPM_BASE}/setup/${VPM_PKG_NO_EXT}"
		VPM_LOCAL_END_PKGFILE="${VPM_BASE}/pkgfiles/${VPM_PKG_NO_EXT}"
		VPM_LOCAL_END_CHLOG="${VPM_BASE}/changelogs/${VPM_PKG_NO_EXT}"

		debug "$(gettext 'Finding %s on installed packages')" "${VPM_PKG_FILE}"
		if ! find_exactly ${VPM_PKG_NAME}
		then
			if [ "${AND_FORCE}" == "0" ]
			then
				die "$(gettext '%s package is allready installed')" "${VPM_PKG_NAME}"
			else
				FOUND_AND_FORCE="1"
			fi
		fi

		debug "$(gettext 'Unpacking vpm package')"
		vpm_unpack_pkg "${P}" "${VPM_TMP_DIR}" || exit 1

		debug "$(gettext 'Reading package file dates')"
		read_db_dates ${VPM_CONTROL}

		printme -f "debug" msg_testing "sections"
		if ! validate_sections "${DB_VPM_SECTIONS}"
		then
			exit_and_rm "$(gettext 'Invalid sections :\n%s')" "${FAIL_SECTIONS}"
		else
			printme -f "debug" msg_testing_ok "sections"
		fi

		printme -f "debug" msg_testing "architecture"
		if ! validate_pkgarchs "${DB_VPM_PKGARCH}"
		then
			exit_and_rm "$(gettext 'Invalid package arch %s')" "${DB_VPM_PKGARCH}"
		else
			printme -f "debug" msg_testing_ok "architecture"
		fi

		printme -f "debug" msg_testing "type"
		if ! validate_pkgtypes "${DB_VPM_PKGTYPE}"
		then
			exit_and_rm "$(gettext 'Invalid package type %s')" "${DB_VPM_PKGTYPE}"
		else
			printme -f "debug" msg_testing_ok "type"
		fi

		debug "$(gettext 'Comparing dates side by side')"
		if [ "${VPM_PKG_NO_EXT}.vpm" != "${DB_VPM_FULL_NAME}.vpm" ]
		then
			die "$(gettext 'Package dates is not consistent')"
		fi

		if [ "${AND_FORCE}" == "0" ]
		then
			printme -f "debug" msg_testing "hold"
			for H in ${VPM_PKG_HOLDON}
			do
				case "${H}" in
					install|all ) exit_and_rm "$(gettext 'This package is holded for installation')" ;;
				esac
			done
			
			if [ "${AND_RUNDEPS}" == "1" ]
			then
				if [ -n "$(trim ${DB_VPM_RUNDEPS})" ]
				then
					printme -f "debug" msg_testing "rundeps"
					MISSING=$(vpmqdb -rf ${VPM_DATABASE} ${DB_VPM_RUNDEPS})
					if [ -n "${MISSING}" ]
					then
						exit_and_rm "$(gettext 'The next runtime depends for %s package are missing\n%s')" \
						"${DB_VPM_NAME}" "$(trim ${MISSING})"
					else
						printme -f "debug" msg_testing_ok "rundeps"
					fi
				fi
			fi

			if [ "${AND_CONFLICTS}" == "1" ]
			then
				if [ -n "$(trim ${DB_VPM_CONFLICTS})" ]
				then
					printme -f "debug" msg_testing "conflicts"
					FOUNDED=$(vpmqdb -Cf ${VPM_DATABASE} ${DB_VPM_CONFLICTS})
					if [ -n "${FOUNDED}" ]
					then
						exit_and_rm "$(gettext 'The next packages are conflict with %s\n%s')" \
						"${DB_VPM_NAME}" "$(trim ${FOUNDED})"
					else
						printme -f "debug" msg_testing_ok "conflicts"
					fi
				fi
			fi

		fi

		msg "$(gettext 'Installing %s package')" "${DB_VPM_NAME}"
		for FUNC in pre_install post_install set_perms
		do
			unset -f ${FUNC}
		done

		if [ -f "${VPM_TMP_SETUP}" ]
		then
			. ${VPM_TMP_SETUP}
			chmod 0744 "${VPM_TMP_SETUP}"
		fi
		
		if [ "${AND_SCRIPT}" = "1" ]
		then
			if commander pre_install &>/dev/null
			then
				printme -f "msg" msg_running_func "pre_install"
				chroot "${VPM_TMP_SETUP##${AND_ROOT}} prein"
			fi
		fi

		debug "$(gettext 'Unpacking data')"
		vpm_unpack_data ${VPM_EXPLODE_DIR} ${AND_ROOT}
		if [ "${AND_SCRIPT}" == "1" ]
		then
			if commander set_perms
			then
				printme -f "msg" msg_running_func "set_perms"
				chroot "${VPM_TMP_SETUP##${AND_ROOT}} setperm"
			fi
			
			if commander post_install
			then
				printme -f "msg" msg_running_func "post_install"
				chroot "${VPM_TMP_SETUP##${AND_ROOT}} postin"
			fi
		fi


		if [ "${FOUND_AND_FORCE}" == "1" ]
		then
			delete_all_matches "${DB_VPM_NAME}"
		fi

		insert_into_database
		move_files

		if [ "${AND_INITRC}" == "1" ]
		then
			add_initscripts
		fi

		if [ "${AND_TRIGGERS}" = "1" ]
		then
			shot_triggers "${DB_VPM_NAME}"
		fi

		#
		# Remove explode directory
		#
		rm -rf ${VPM_EXPLODE_DIR}
	done
	
	return 0
}
